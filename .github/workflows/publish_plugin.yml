name: plugin publish

on:
  issues:
    types: [opened, reopened, edited]
  pull_request_target:
    types: [closed]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    name: check
    # do not run on forked PRs, do not run on not related issues, do not run on pr comments
    if: |
      !(
        (
          github.event.pull_request &&
          (
            github.event.pull_request.head.repo.fork ||
            !(
              contains(github.event.pull_request.labels.*.name, 'Plugin')
            )
          )
        ) ||
        (
          github.event_name == 'issue_comment' && github.event.issue.pull_request
        )
      )
    steps:
      - run: echo "Check passed"
  reaction:
    runs-on: ubuntu-latest
    name: reaction
    needs: check
    if: |
      (
        github.event_name == 'issue_comment' &&
        github.event.action == 'created'
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'opened'
      )
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_KEY }}

      - name: Reaction on issue
        if: github.event_name == 'issues'
        run: |
          gh api --method POST /repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions -f "content=rocket"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Reaction on issue comment
        if: github.event_name == 'issue_comment'
        run: |
          gh api --method POST /repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions -f "content=rocket"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
  plugin_test:
    runs-on: ubuntu-latest
    name: zhenxun plugin test
    needs: check
    permissions:
      issues: read
    outputs:
      result: ${{ steps.plugin-test.outputs.RESULT }}
      output: ${{ steps.plugin-test.outputs.OUTPUT }}
      metadata: ${{ steps.plugin-test.outputs.METADATA }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        run: pip install poetry

      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry cache
        uses: actions/cache@v3
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}

      - name: Setup zhenxun
        id: setup-zhenxun
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        run: |
          git clone -b main https://github.com/Hibikier/zhenxun_bot.git

      - name: Test Plugin
        id: plugin-test
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        run: |
          cd zhenxun_bot
          rm -rf ./zhenxun/plugins/* poetry.lock
          poetry source remove ali
          poetry install --no-root
          poetry run pip install pydantic==1.10
          curl -sSL https://github.com/zhenxun-org/zhenxunflow/releases/latest/download/plugin_test.py | poetry run python -

      - name: Test Plugin PR
        id: plugin-test-pr
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        run: |
          curl -sSL https://github.com/zhenxun-org/zhenxunflow/releases/latest/download/plugin_test.py | python -

  zhenxunflow:
    runs-on: ubuntu-latest
    name: zhenxunflow
    needs: plugin_test
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: .cache/.pre-commit
          key: zhenxunflow-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: zhenxunflow
        uses: docker://ghcr.io/zhenxun-org/zhenxunflow:latest
        with:
          config: >
            {
              "base": "index",
              "plugin_path": "plugins.json"
            }
        env:
          PLUGIN_TEST_RESULT: ${{ needs.plugin_test.outputs.result }}
          PLUGIN_TEST_OUTPUT: ${{ needs.plugin_test.outputs.output }}
          PLUGIN_TEST_METADATA: ${{ needs.plugin_test.outputs.metadata }}
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.APP_KEY }}
          PRE_COMMIT_HOME: /github/workspace/.cache/.pre-commit

      - name: Fix permission
        run: sudo chown -R $(whoami):$(id -ng) .cache/.pre-commit